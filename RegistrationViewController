 package com.example.tracpro;


import javafx.application.Application;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.scene.Parent;
import javafx.scene.control.*;
import javafx.scene.layout.Pane;
import java.sql.Connection;
import java.io.IOException;
import java.net.URL;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.ResourceBundle;

public class RegistrationViewController{



    @FXML
    public PasswordField password;
    private LocalDate todayDate;
    @FXML
    private RadioButton male;
@FXML
TextField username;
    @FXML
    private RadioButton female;

    @FXML
    private RadioButton others;

    @FXML
    private DatePicker birthDay;

    @FXML
    private TextField firstName;

    @FXML
    private TextField lastName;

    @FXML
    private TextField profession;

    @FXML
    private TextField eMail;

    @FXML
    private TextField institute;

    @FXML
    private TextField contact;
    @FXML
    private PasswordField confirmPassword;

    @FXML
    private Button register;
  //  @FXML
   // private Button ;



    @FXML
    public void registerButtonAction(ActionEvent actionEvent) {
       // System.out.println("va");
  registerUser();


    }

    private void registerUser() {
         String Firstname=firstName.getText();
         String Lastname=lastName.getText();
         String Password=String.valueOf(password.getText());
         String Username=username.getText();
         String Email=eMail.getText();
       //  String birthdate= String.valueOf(birthDay.getValue());
         String Profession=profession.getText();
         String Institute=institute.getText();
         String Contact=contact.getText();

   String ConfirmPassword = String.valueOf(confirmPassword.getText());

  if(Firstname.isEmpty()|| Email.isEmpty()||Contact.isEmpty()||Password.isEmpty()||Username
           .isEmpty()){
      Alert errorAlert = new Alert(Alert.AlertType.ERROR);
      errorAlert.setHeaderText("Input not valid");
      errorAlert.setContentText(" Details missed. please fill up all the data");
      errorAlert.showAndWait();


   }

  if(!Password.equals(ConfirmPassword)){

      Alert errorAlert = new Alert(Alert.AlertType.ERROR);
      errorAlert.setHeaderText("Password Not Matched");
      errorAlert.setContentText(" Password not matched");
      errorAlert.showAndWait();

  }

   user = addUserToDatabase(Firstname,Lastname,Username,Password,ConfirmPassword,Email,Profession,Institute,Contact);

  if(user!=null){
      //dispose();
  }
  else {
      Alert errorAlert = new Alert(Alert.AlertType.ERROR);
      errorAlert.setHeaderText("User can't be added");
      errorAlert.setContentText(" Already exists");
      errorAlert.showAndWait();

  }




    }
  public User user;
    private User addUserToDatabase(String firstname, String lastname, String username, String password, String confirmPassword, String email, String profession, String institute, String contact) {
           User user = null;

     //final String DB_URL = "jdbc::mysql://locahost/user?serverTimezone=UTC";
     final String USERNAME = "root";
     final String PASSWORD="";

        String DB_URL = "jdbc:mysql://localhost/userdata";
      //  Class.forName ("com.mysql.jdbc.Driver").newInstance ();
       // Connection conn = DriverManager.getConnection (url, "username", "password");

     try {
         Connection conn = DriverManager.getConnection(DB_URL,USERNAME,PASSWORD);
         String sql = "INSERT INTO users (firstname,lastname,username,password,email,profession,institute,contact) " + //
                 "VALUES (?,?,?,?,?,?,?,?)";
         //String birthdate="dummy";
         Statement stmt = conn.createStatement();
         PreparedStatement preparedStatement = conn.prepareStatement(sql);
         preparedStatement.setString(1,firstname);
         preparedStatement.setString(2,lastname);
         preparedStatement.setString(3,username);
         preparedStatement.setString(4,password);
        // preparedStatement.setString(5,confirmPassword);
           preparedStatement.setString(5,email);
          // preparedStatement.setString(7,birthdate);
         preparedStatement.setString(6,profession);
         preparedStatement.setString(7,institute);
        preparedStatement.setString(8,contact);
        int addedRows = preparedStatement.executeUpdate();

        if(addedRows>0){
            user = new User();
            user.firstname=firstname;
            user.lastname=lastname;

            user.institute=institute;
            user.contact=contact;
            user.email = email;
            user.username = username;
            user.password=password;
            user.profession=profession;



        }
     stmt.close();
        conn.close();


     }
     catch (Exception e){
         e.printStackTrace();
     }



           return user;

    }


    @FXML
    private void backButtonAction(ActionEvent event) {
        try{
            GUIUtil.changeScene(LoginViewController.getRoot(),event);
        }catch (Exception e)
        {
            e.printStackTrace();
        }
    }

    public void initialize(URL arg0, ResourceBundle arg1) {
        LocalDate todayDate = LocalDate.now();
    }




    public static ScrollPane getRoot() throws IOException{
        Parent root = FXMLLoader.load(
                RegistrationViewController.class.getResource("RegistrationView.fxml")
        );
        return (ScrollPane) root;
    }

}
